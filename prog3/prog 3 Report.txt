Charlie Grant
I did it. I used a link list to read the table of contents and store the Item number, the topic, and the page number. After the presentations on Tuesday I had a better idea on what was an acceptable output, and have achieved a loop that outputs everything in each item’s body. It even skips every time the document restates the item or part number at the top of the page. I ran into a problem originally because I used physical numbers for limiters of arrays. These numbers were larger for Microsoft meaning when I tested the code for EA it led to the project crashing. I also initially struggled to find a way to check if an answer had been given but I just made a global bool allowing every method to check. I could maybe combine the Item and Node header/classes but it made it easier for me to implement linked list ideas from java keeping the term Node. 
        The problem I had been running into for prog 2 was any time Item blank was said it was matched and the code was triggered. Initially I tried to create a very rigid and restricted regex to match only the lines I wanted. However, I just added a regex to match PART which always precedes the Item at the top of the page. By using a bool to detect when the PART was found and using that bool in an if statement along with an if statement based on the stored item number in the linked list the code then says to start printing. I found that these two restrictions led to consistently printing the desired output and were efficient. I could probably clean up the code that matches what question was asked with each topic but I am happy with the clarification function. Overall, I am very proud of the code but still recognize its flaws.